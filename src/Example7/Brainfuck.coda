import coda.lang.System

import coda.io.IOInterface

import coda.util.Charsets

/*
 * A simple brainfuck interpreter written in coda.
 * @author Dominik Fluch
 */
public class Brainfuck {
	
	/*
	 * Contains all instructions (source code) given
	 * to the interpreter.
	 */
	private array<char> instructions = null
	private array<int> cells = null
	
	private IOInterface ioInterface = null
	
	private int cellPointer = 0
	
	/**
	 * @param code		The code to be interpreted.
	 * @param cells		The memory cells.
	 * @param ioInterface	The ioInterface.
	 */
	public Brainfuck(string code, array<int> cells, IOInterface ioInterface) {
		this.instructions = code.getCharacters()
		this.cells = cells
		this.ioInterface = ioInterface
	}
	
	/**
	 * @param code		The code to be interpreted.
	 * @param cellSize	The amount of cells that can be used for storing data.
	 * @param ioInterface	The ioInterface.
	 */
	public Brainfuck(string code, int cellSize, IOInterface ioInterface) {
		this(code, int[cellSize], ioInterface)
	}
	
	/**
	 * Executes the saved brainfuck instructions.
	 */
	public void execute() {
		for(int i = 0, i < this.getInstructions().getLength(), i += 1) {
			
			char instruction = this.getInstructions().get(i)
			
			// Could have also used switch block.
					
			if(instruction == '>') {
				this.incrementCellPointer()
			}else if(instruction == '<') {
				this.decrementCellPointer()
			}else if(instruction == '+') {
				if(this.getCells().get(this.getCellPointer()) == null)this.getCells().set(this.getCellPointer(), 1)
				else this.getCells().set(this.getCellPointer(), this.getCells().get(this.getCellPointer()) + 1)
			}else if(instruction == '-') {
				if(this.getCells().get(this.getCellPointer()) == null)this.getCells().set(this.getCellPointer(), -1)
				else this.getCells().set(this.getCellPointer(), this.getCells().get(this.getCellPointer()) - 1)
			}else if(instruction == '.') {
				// this.getProgramOutput().write(Charsets.convert(this.getCells().get(this.getCellPointer()).toCharacter().toByte(), "US-ASCII"))
				this.getIOInterface().getOutputStream().write(this.getCells().get(this.getCellPointer()).toCharacter().toByte())
				this.getIOInterface().getOutputStream().flush()
			}else if(instruction == ',') {
				this.getCells().set(this.getCellPointer(), this.getIOInterface().getInputStream().read().toInteger())
			}else if(instruction == '[') {
				int indent = 1
				int value = this.getCells().get(this.getCellPointer())
				
				if(value == null | value == 0) {
					for(i += 1, i < this.getInstructions().getLength() & indent != 0, i += 1) {
						instruction = this.getInstructions().get(i)
						if(instruction == '[')indent += 1
						else if(instruction == ']')indent -= 1
					}
				}
			}else if(instruction == ']') {
				int indent = 1
				int value = this.getCells().get(this.getCellPointer())
				
				if(value != null & value != 0) {
					for(i -= 1, i >= 0 & indent != 0, i -= 1) {
						instruction = this.getInstructions().get(i)
						if(instruction == '[')indent -= 1
						else if(instruction == ']')indent += 1
					}
					i += 1
				}
				
			}
			
			
		}
	}
	
	/**
	 * Decrements the cell pointer.
	 */
	private void decrementCellPointer() this.cellPointer -= 1
	
	/**
	 * Increments the cell pointer.
	 */
	private void incrementCellPointer() this.cellPointer += 1
	
	// All getters
	
	/**
	 * Returns all the saved instructions.
	 */
	public array<char> getInstructions() return this.instructions
	
	/**
	 * Returns the current cell pointer.
	 */
	public int getCellPointer() return this.cellPointer
	
	/**
	 * Returns all the cells.
	 */
	public array<int> getCells() return this.cells
	
	/**
	 * Returns the ioInterface.
	 */
	public IOInterface getIOInterface() return this.ioInterface
	
	/**
	 * Tests the interpreter.
 	 */
	public static void main() {
		var b = new Brainfuck("++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.", 30000, System.getConsole())
		
		b.execute()

	}
}